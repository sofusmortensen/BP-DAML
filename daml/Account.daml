module Account where

import Effect

template Account
  with
    issuer : Party
    accountNo : Text
    asset : Text
    owner : Party
    amount : Decimal
  where
    signatory issuer, owner

    key (issuer, accountNo) : (Party, Text)
    maintainer key._1

template AccountIssuance
  with
    account : Account
  where
    signatory account.issuer
    observer account.owner

    key (account.issuer, account.accountNo) : (Party, Text)
    maintainer key._1

    choice AccountIssuance_Accept : ContractId Account
      controller account.owner
      do
        create account

    choice AccountIssuance_Reject : ()
      controller account.owner
      do
        return ()

    choice AccountIssuance_Withdraw : ()
      controller account.issuer
      do
        return ()

template TransferAgreement
  with
    service : Service
    party : Party
    account : Text
  where
    signatory service.issuer, party

    nonconsuming choice SettlePayer : Optional (ContractId Transfer)
      with transferId : ContractId Transfer
           actor : Party
      controller actor
      do
        tr <- fetch transferId

        assert $ tr.service == service 
        assert $ tr.payer /= service.issuer

        (cid, acc) <- fetchByKey @Account (service.issuer, account)
        assert $ acc.asset == tr.asset
        archive cid
        create acc with amount = acc.amount - tr.amount

        if tr.payee == service.issuer then
          do
            archive transferId
            return None
        else
          do
            (transferId, transferId2) <- exercise transferId Split
            archive transferId2
            return $ Some transferId

    nonconsuming choice SettlePayee : Optional (ContractId Transfer)
      with transferId : ContractId Transfer
           actor : Party
      controller actor
      do
        tr <- fetch transferId

        assert $ tr.service == service 
        assert $ tr.payee /= service.issuer

        (cid, acc) <- fetchByKey @Account (service.issuer, account)
        assert $ acc.asset == tr.asset
        archive cid
        create acc with amount = acc.amount + tr.amount

        if tr.payer == service.issuer then
          do
            archive transferId
            return None
        else
          do
            (transferId, transferId2) <- exercise transferId Split
            archive transferId2
            return $ Some transferId            

template TransferAgreementProposal
  with
    contract : TransferAgreement
  where
    signatory contract.service.issuer
    observer contract.party

    choice TransferAgreementProposal_Sign
        : ContractId TransferAgreement
      controller contract.party
      do
        create contract
