module Effect where

import DA.Next.Set
import DA.Assert

data Service = 
  Service with issuer : Party; id : Text
  deriving (Eq, Show)

type EffectId = ContractId Effect
template Effect
  with
    issuer : Set Party
    message : Text
    actor : Party
  where
    signatory issuer

type TransferId = ContractId Transfer
template Transfer
  with
    service : Service
    payer : Party
    payee : Party
    asset : Text
    amount : Decimal
    maturity : Optional Time
  where
    signatory payer, payee
    observer service.issuer

    ensure payer /= payee && amount >= 0.0

    choice Split : (ContractId Transfer, ContractId Transfer)
      controller service.issuer
      do
        l <- create this with payer = service.issuer
        r <- create this with payee = service.issuer
        return (l, r)

    choice Mature : ContractId Transfer
      with
        actor : Party
      controller actor
      do
        time <- getTime
        assert $ optional False (<=time) maturity
        create this with maturity = None

    choice NetWith : Optional (ContractId Transfer)
      with
        tid : ContractId Transfer
      controller payee
      do
        time <- getTime
        that <- fetch tid

        service === that.service

        archive tid
        if payer == that.payee && payee == that.payer
          then do
            if (that.amount == amount)        
              then return None
              else if (that.amount < amount)
                then Some <$> create this with amount = amount - that.amount
                else Some <$> create that with amount = that.amount - amount
          else if payer == that.payer && payee == that.payee
            then Some <$> create this with amount = amount + that.amount
            else error "invalid operation"


template TransferProposal
  with
    transfer : Transfer
  where
    signatory transfer.payer
    observer transfer.payee

    choice TransferProposal_Accept : ContractId Transfer
      controller transfer.payee
      do
        create transfer
    